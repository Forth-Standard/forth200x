From: Krishna Myneni <krishnamyneni@bellsouth.net>
Newsgroups: comp.lang.forth
Subject: Rfd: floating point truncation V1
Message-ID: <OtyFl.30819$19.5254@bignews2.bellsouth.net>
Date: Wed, 15 Apr 2009 23:38:37 -0500

RfD:  Floating point truncation

Author: Krishna Myneni

Version 1 -- 15 April 2009
Version 0 -- 10 April 2009


Problem
=======

In practice, floating point calculations sometimes require rounding of a 
floating point number to a nearby integer, with the result being the floating 
point representation of the integer. ANS Forth provides two words in the 
optional floating point wordset, FROUND and FLOOR, for performing such rounding. 
FROUND (DPANS94, 12.6.1.1612) and FLOOR (DPANS94, 12.6.1.1558), which, 
respectively, provide rounding to the nearest integer, and rounding to the 
nearest integer on the side of the number line towards negative infinity. 
Another common form of rounding, often employed, is rounding to the nearest 
integer on the side of the number line towards zero. The latter form of rounding 
is often referred to colloquially as "truncation". ANS Forth does not provide a 
word for rounding towards zero, and returning a floating point representation of 
the resulting integer. This type of operation is usually carried out through an 
awkward, and, on non-optimizing systems, inefficient sequence of words, F>D, 
followed by D>F.  For Forth systems which support the use of signed floating 
point zero, the sequence, F>D D>F, will fail to produce the correct result (-0E) 
for arguments in the open interval (-1, 0).


Proposal
========

Include a standard word, named "FTRUNC", to perform "truncation", i.e. rounding 
of a floating point number towards zero, returning a floating point 
representation of the resulting integer.

FTRUNC
f-trunc FLOATING
( F: r1 -- r2 )

Round r1  to an integral value using the "round towards zero" rule, giving r2. 
Forth systems supporting floating-point signed zero, i.e. systems which provide 
an internal representation of floating point negative zero, "-0E", which differs 
from the representation of floating point positive zero, "0E", should return r2 
as floating point negative zero for r1 in the open interval (-1, 0).


Reference Implementation
========================

The reference implementation below was posted to comp.lang.forth, by George A. 
Hubert, on
12 April 2009. This implementation passes all tests given below, b) and c), for 
a system
which supports floating point signed zero, namely Gforth. No testing of the 
reference
implementation was performed for a Forth system which does *not* support 
floating point
signed zero, tests a) below.

: FTRUNC   ( r1 -- r2 )
          FDUP F0= 0=
  IF      FDUP F0<
  IF      FNEGATE FLOOR FNEGATE
  ELSE    FLOOR
  THEN
  THEN    ;


Testing
=======

a) Systems which do NOT provide support for floating point signed zero:

  0E          FTRUNC  0E 0E F~ .   \ -1
  1E-9        FTRUNC  0E 0E F~ .   \ -1
-1E-9        FTRUNC  0E 0E F~ .   \ -1
-0.9E        FTRUNC  0E 0E F~ .   \ -1
-1E  1E-5 F+ FTRUNC  0E    F= .   \ -1
-1E -1E-5 F+ FTRUNC -1E    F= .   \ -1
3.14E        FTRUNC  3E    F= .   \ -1
3.99E        FTRUNC  3E    F= .   \ -1
4E           FTRUNC  4E    F= .   \ -1
-4E          FTRUNC -4E    F= .   \ -1
-4.1E        FTRUNC -4E    F= .   \ -1


b) Systems which support floating point signed zero:

-0E 0E 0E F~ .  \ should print 0 to indicate system distinguishes between -0E and 0E
                 \ if results is TRUE (-1), problem may be with implementation of F~

0E           FTRUNC  0E 0E F~ .   \ -1
-0E          FTRUNC -0E 0E F~ .   \ -1
  1E-9        FTRUNC  0E 0E F~ .   \ -1
-1E-9        FTRUNC -0E 0E F~ .   \ -1
-0.9E        FTRUNC -0E 0E F~ .   \ -1
-1E  1E-5 F+ FTRUNC -0E    F= .   \ -1
-1E -1E-5 F+ FTRUNC -1E    F= .   \ -1
3.14E        FTRUNC  3E    F= .   \ -1
3.99E        FTRUNC  3E    F= .   \ -1
4E           FTRUNC  4E    F= .   \ -1
-4E          FTRUNC -4E    F= .   \ -1
-4.1E        FTRUNC -4E    F= .   \ -1

c) Automated tests using ttester.fs, on systems which support floating point 
signed zero.
Unless otherwise noted, the automated tests should pass.

-0E 0E 0E F~ .  \ should print 0 to indicate system distinguishes between -0E and 0E
                 \ if results is TRUE (-1), problem may be with implementation of F~

SET-EXACT
t{ 0E           FTRUNC  ->   0E  }t
t{ -0E          FTRUNC  ->  -0E  }t
t{ 1E-9         FTRUNC  ->   0E  }t
t{ -1E-9        FTRUNC  ->  -0E  }t
t{ -0.9E        FTRUNC  ->  -0E  }t
t{ -1E  1E-5 F+ FTRUNC  ->  -0E  }t
t{ -1E -1E-5 F+ FTRUNC  ->  -1E  }t
t{ 3.14E        FTRUNC  ->   3E  }t
t{ 3.99E        FTRUNC  ->   3E  }t
t{ 4E           FTRUNC  ->   4E  }t
t{ -4E          FTRUNC  ->  -4E  }t
t{ -4.1E        FTRUNC  ->  -4E  }t


Remarks
=======

-- FTRUNC complements the ANS Forth words, FROUND and FLOOR, which also return 
floating point values.

-- The Intel FPU instruction set contains FRNDINT, which, with the NDP control 
word appropriately set, will perform the specified truncation, and leave the 
floating point result on top of the FPU stack in a single instruction.

-- The current ANS Forth specification of F>D is ambiguous. Even though the 
adoption of a common meaning  seems to have occurred, it is nevertheless 
advisable to revise the language specifying the F>D operation to remove the 
ambiguity. A separte proposal is warranted for standardization of F>D. Below is 
the current language of the ANS Forth specification for F>D.

F>D
f-to-d FLOATING

	( -- d ) ( F: r -- )
	or ( r -- d )

d is the double-cell signed-integer equivalent of the integer portion of r. The 
fractional portion of r is discarded. An ambiguous condition exists if the 
integer portion of r cannot be precisely represented as a double-cell signed 
integer.

Although not specified in the standard, the type of truncation performed is 
typically truncation towards zero. An extensive discussion of the type of 
truncation which should be performed by F>D was held on comp.lang.forth several 
years ago, and the consensus at that time appeared to be that F>D should perform 
truncation towards zero.


Experience
==========

-- Many languages which provide floating point support, e.g. C, Lisp, FORTRAN, 
implement a standard word for the floating point rounding towards zero, or 
"truncation".

-- In early Forth systems, LMI's UR/Forth provided FTRUNCATE, which, reportedly 
was equivalent to the sequence, F>D D>F.

-- The following contemporary Forth systems provide a word for rounding a 
floating point number towards zero, and returning a floating point 
representation of the result:

        System     |  Word Name  |  Returns -0E for argument in interval (-1, 0)
        ------------------------------------------------------------------------
        PFE        |  FTRUNC     |  yes
        kForth     |  FTRUNC     |  yes
        VFX Forth  |  FINT       |  yes   (1)
        iForth     |  FTRUNC     |  yes
        Win32Forth |  FTRUNC     |  unknown

(1) System supports floating point signed zero, and FINT returns signed zero, 
but it is not apparent because
F. does not output the correct sign for negative zero, and an exact comparison 
using F~ returns true when
comparing with either 0E or -0E, i.e. both of the following comparisons return TRUE:

	-0.9E FINT  0E 0E F~
	-0.9E FINT -0E 0E F~



\ end of RfD


