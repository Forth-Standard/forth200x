Article: 124015 of comp.lang.forth
Path: tunews.univie.ac.at!aconews-feed.univie.ac.at!newsfeed.wu-wien.ac.at!newsfeed.utanet.at!news.glorb.com!postnews.google.com!h3g2000cwc.googlegroups.com!not-for-mail
From: "J Thomas" <jethomas5@gmail.com>
Newsgroups: comp.lang.forth
Subject: Request for Discussion -- (( and multiline comments
Date: 30 Jan 2007 13:50:56 -0800
Organization: http://groups.google.com
Lines: 188
Message-ID: <1170193856.683826.255320@h3g2000cwc.googlegroups.com>
NNTP-Posting-Host: 64.83.8.70
Mime-Version: 1.0
Content-Type: text/plain; charset="iso-8859-1"
X-Trace: posting.google.com 1170193863 4548 127.0.0.1 (30 Jan 2007 21:51:03 GMT)
X-Complaints-To: groups-abuse@google.com
NNTP-Posting-Date: Tue, 30 Jan 2007 21:51:03 +0000 (UTC)
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.10) Gecko/20051106 Firefox/1.0.6,gzip(gfe),gzip(gfe)
Complaints-To: groups-abuse@google.com
Injection-Info: h3g2000cwc.googlegroups.com; posting-host=64.83.8.70;
   posting-account=wP2gaA0AAACOjKHjz4G3_054UgCn5G5w
Xref: tunews.univie.ac.at comp.lang.forth:124015

RfD -- ((

January 29, 2007
* Second Draft *

Rationale
=========

Problem
-------
Most Forth users find it useful to have a block comment -- a comment 
command that covers multiple lines. There are many names for this 
because there is no standard.

Names include (( (* /* ( etc.

One standard portable approach is 0 [IF] ..... [THEN]   This works on 
every standard Forth that implements [IF] [THEN] but it is ugly. It's 
easy to rename 0 [IF] to, say, [DOCUMENTATION] and still end with 
[THEN] . This solution is not generally accepted as shown by the 
existence and use of so many alternatives.


Current Practice
----------------

Many Forth systems provide this capability. I am not yet aware of two 
that use the same name.


Solution
--------

Agree on a common name. The more Forth systems that provide a standard 
name, the more code will use it and the less trouble it will be 
porting that code. Code that uses some other name will still run on 
every system that supports it and software can be easily written to 
support it elsewhere, but to the extent we use a standard name that 
bother can be avoided. All that is needed is that we agree on the 
name.


Proposal
========

15.6.2.xxxs ((                "comments"      TOOLS EXT

	Compilation: Perform the execution semantics given below.

	Execution: ( "ccc" -- )

        Parse text until the word
  	))
	is found or until the current parse area cannot be refilled.
	Discard the found )) string. (( is an immediate word.

	An ambiguous condition exists if the word )) is not found and the 
parse area cannot be refilled.


Typical use
-----------

(( This is a comment, it requires supporting statements.
   These statements can go on their own lines.
   There might be lots of them. ))

(( ---------------------------------------------------------------
   People have lots of styles for comenting.
   They like to make their comments stand out as obvious comments.
   --------------------------------------------------------------- ))

( ----------------------------------------------------------------)
(  They could do that with just ( as traditionally defined.       )
(  But usually they don't.                                        )
( ----------------------------------------------------------------)


Reference Implementation
------------------------

: MAYBE-REFILL ( S: -- flag )    \ refill if at end of line, 0 if 
can't
   SOURCE NIP >IN @ > DUP 0= IF DROP REFILL THEN ;

: (( ( S: -- )                   \ multi-line comment, ended by ))
   BEGIN
     [CHAR] ) PARSE 2DROP BL WORD COUNT S" )" COMPARE WHILE
       MAYBE-REFILL WHILE
     REPEAT
     ." Multiline comment needed )) and never found it -- ambiguous 
condition."
     CR ." Your system can do anything at this point and still be a 
standard system."
   THEN ; IMMEDIATE

WORD can be replaced by PARSE-NAME when the time comes.

It would not be difficult to make a CREATE DOES> word which defines 
new words like (( with new ending strings different from )) . I may do 
that.


Test Cases
----------

((         123 . )) 456 .

((         123 .
456 .
      789 .    )) .( aaa )

: foo ((  123 .
   456 . )) 789 . ;
foo


Remarks
-------

I don't care what name we use provided we can agree on one.
I dislike using /* because there might be some use for files where 
Forth code is in C comments and vice versa.


/*

Forth code here

((
*/

C code here

/*
))

More Forth code here

Etc.

That isn't a major concern but /* isn't my top choice.

I don't like to just extend ( ) . One typo in the wrong place with a 
looming deadline and you could spend 5 minutes tearing your hair out 
figuring out what happened. Also, your multiline comment can't include 
a ) which greatly reduces its value.

 I kind of like Marcel Hendrix's (* . It encourages intense visuals.

(* ******************************************
 *  This is a bold comment!                 *
 ****************************************** *)

((   )) seems bland and inoffensive, something we could all agree on. 
If you prefer something else that's fine.


Mishaps
-------

My first day using APL, somebody came by my keyboard while I was 
getting a drink of water, and they started the command that gets a 
user string. When I came back nothing I did could get the computer to 
notice me. I tried to logout. I tried everything I could think of. I 
was stuck. Then somebody suggested I end the string.

Extended comments in files or EVALUATE strings are self-limiting. But 
not at the keyboard. If you accidentally get into a comment and the 
system seems to be frozen, how long will it take for you to remember 
to try )) ? Does your system provide another way to get out of that? 
Should and could there be a standard way out?

If there is no obvious way out on your system, a word very similar to 
(( could become a password. Type LOCK and when you get a drink of 
water the system will ignore all keyboard input until you type XLERB 
or whatever you choose for a password. Could that be used maliciously? 
Could someone sneak in a bit of Forth code that gets executed during 
keyboard entry, and your keyboard freezes until you guess the password 
or you abort the Forth?

What if input is redirected to some other source, a streaming source, 
and somehow it all gets commented out. All input from that source will 
be ignored until it sends the end-comment signal or until you break 
the connection. The foreign source can't even tell you that they're 
done. Your Forth system hears them but it isn't listening. Is this a 
problem?



