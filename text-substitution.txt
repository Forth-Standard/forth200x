From: stephenXXX@mpeforth.com (Stephen Pelc)
Newsgroups: comp.lang.forth
Subject: RfD: text substitution
Organization: MPE
Reply-To: stephenXXX@INVALID.mpeforth.com
Message-ID: <49d4f357.76514605@192.168.0.50>
Date: Thu, 02 Apr 2009 17:18:53 GMT

Text substitution proposal

Revised: 2 April 2009

Author:
Stephen Pelc, MicroProcessor Engineering, stephen@mpeforth.com
Input from:
Peter Knaggs, Leon Wagner, Bernd Paysan

Contact:
Stephen Pelc
MicroProcessor Engineering
133 Hill Lane
Southampton SO15 5AF
England

Tel: +44 (0)23 80631441
Fax: +44 (0)23 80339691
Net: stephen@mpeforth.com
Web: http://www.mpeforth.com

Rationale
=========
Text substitution is useful for a number of applications,
including:
1)Directory handling
2)Configuration management
3)Localisation

Many applications need to be able to perform text substitution,
for example:

Your balance at <time> on <date> is <currencyvalue>.

We can provide for these requirements by defining a text
substitution facility. For example, we can provide an initial
string in the form:

Your balance at %time% on %date% is %currencyvalue%.

In this example, % is used as delimiters for the substitution
name. The text “time”, "date” and “currencyvalue” are text
substitutions, where “time” and “date” insert the current time and
date, and “currencyvalue” inserts the top item on the stack as a
string in the active currency.

Implementation of SUBSTITUTE may be considered as being equivalent
to a wordlist which is searched. If the substitution name is
found, the word is executed to return a string that replaces the
substitution name and delimiters. Such words can be deferred or
multiple wordlists can be used. The implementation techniques
required are similar to those many implementers have used with
ENVIRONMENT?. The range of functions required can be handled by
standardising substitution names. Practical use indicates that
implemention with a wordlist eases adding substitutions that
perform run-time calculations.

Translation of a sentence or message from one language to another
may result in changes to the displayed parameter order. For
example, the substitution in:
Your balance at %time% on %date% is %currencyvalue%.
requires a different order in Russian.

When an application provides substitution of parameters on the
data stack by SUBSTITUTE and uses substitutions to access these
items, it is recommended that items not be destroyed but instead
be removed after execution of SUBSTITUTE. For example, the
previous string could be redone as:
Your balance at %$4% on %$2% is %i0%.
where the substitution $x takes the caddr/len string at stack
depth x, and the substitution ix takes a signed integer. The
depths are defined after the parameters to SUBSTITUTE itself have
been removed. The word SUBSTITUTE would then be called as:
$time $tlen $date $dlen val src srclen dest dlen SUBSTITUTE

This proposal is derived from an implementation used in a
commercial Forth for more than ten years. The % character was
chosen as the default delimiter because it is an illegal character
in DOS and Windows file and path names. By choosing an illegal
character, substitutions in file name handling can very easily be
implemented, even at the level of OPEN-FILE and CREATE-FILE.

There is no provision for changing the delimiter character because
it causes difficulties when porting code and can have dangerous
side effects at run-time. Similarly, use of separate leading and
trailing delimiter characters increases the complexity of some
substitutions.


Solution
========
The following two words are defined to handle substitution of
text, and output of application data such as date, time, currency,
path and so on.

REPLACES        \ c-addr1 len1 c-addr2 len2 --
Set the string defined by c-addr1 and len1 as the text to
substitute for the substitution named by c-addr2 and len2. If the
substitution does not exist it is created. The program may then
reuse the buffer c-addr1/len1 without affecting the definition of
the substitution. Ambiguous conditions occur as follows
1)The substitution cannot be created.
2)The name of a substitution contains a delimiter character.

SUBSTITUTE       \ c-addr1 len1 c-addr2 len2 -- c-addr2 len3 n
Perform substitution on the string at c-addr1 and len1 placing the
result at string c-addr2 and len2, returning c-addr2 and len3, the
length of the resulting string. Ambiguous conditions occur if the
resulting string will not fit into c-addr2 and len2 or
substitution text cannot be found. An ambiguous condition occurs
if c-addr2 is the same as c-addr1. The return value n is positive
(0..+n) on success and indicates the number of substitutions made.
A negative value for n indicates that an error occurred, leaving
caddr2 and len3 undefined. Substitution occurs from the start of
c-addr1 and len1 in one pass and is non-recursive.

When a substitution name surrounded by delimiters is encountered
by SUBSTITUTE, the following occurs:

1)If the name is a valid substitution name, the leading and
trailing delimiter characters and the enclosed substitution name
are replaced by the substitution text.
2)If the name is null, a single delimiter character is
substituted, i.e. %% is replaced by %.
3)In all other cases, an ambiguous condition exists.


Reference implementation
========================
decimal

char % constant delim
\ Character used as the substitution name delimiter.

wordlist constant wid-subst
\ Wordlist ID of the wordlist used to hold substitution names
\ and replacement text.

256 buffer: Name	\ -- addr
\ Scratch buffer to hold substitution name as a counted string.
variable DestLen	\ -- addr
\ Maximum length of the destination buffer.
2variable Dest		\ -- addr
\ Holds destination string current length and address.
variable SubstErr	\ -- addr
\ Holds zero or an error code.

: place         \ c-addr1 u c-addr2 --
\ Copy the string described by c-addr1 u as a counted string at
\ the memory address described by c-addr2.
  2dup 2>r
  1 chars + swap move
  2r> c!
;

: makeSubst	\ caddr len -- caddr
\ Given a name string create a substution and storage space.
\ Return the address of the buffer for the substitution text.
\ This word requires carnal knowledge of the host Forth.
\ Some systems may need to perform case conversion here.
  get-current >r  wid-subst set-current
  ($create)			\ like CREATE but takes caddr/len
  r> set-current
  here  256 allot  0 over c!	\ create buffer space
;

: findSubst	\ caddr len -- xt flag | 0
\ Given a name string, find the substitution. Return xt and flag
\ if found, or just zero if not found. Some systems may need to
\ perform case conversion here.
  wid-subst search-wordlist
;

: replaces	\ text tlen name nlen --
\ Define the string text/tlen as the text to substitute for the
\ substitution named name/nlen. If the substitution does not
\ exist it is created.
  2dup findSubst if
    nip nip  execute			\ get buffer address
  else
    makeSubst
  then
  place					\ copy as counted string
;

: addDest	\ char --
\ Add the character to the destination string.
  Dest @ DestLen @ < if
    Dest 2@ + c!  1 chars Dest +!
  else
    drop  -1 SubstErr !
  then
;

: formName	\ caddr len -- caddr' len'
\ Given a source string pointing at a leading delimiter, place
\ the name string in the name buffer.
  1 /string  2dup delim scan >r drop	\ find length of residue
  2dup r> - dup >r Name place		\ save name in buffer
  r> 1 chars + /string			\ step over name and trailing %
;

: processName	\ -- xt flag
\ Find the last substitution name. Return true if found.
  Name count findSubst if
    execute count bounds		\ copy text to destination
    ?do  i c@ addDest  1 chars +loop
  then
;

: substitute	\ src slen dest dlen -- dest dlen' n
\ Expand the source string using substitutions. Note that this
\ version is simplistic, performs no error checking, and requires
\ a global buffer and global variables.
  Destlen !  0 Dest 2!  0 -rot		\ -- 0 src slen
  0 SubstErr !
  begin
    dup 0 >
   while
    over c@ delim <> if			\ character not %
      over c@ addDest  1 /string
    else
      over 1 chars + c@ delim = if	\ %% for one output %
        delim addDest  2 /string	\ add one % to output
      else
        rot 1+ -rot			\ count substitutions
        formName processName
      then
    then
  repeat
  2drop  Dest 2@  rot SubstErr @
  if  drop  SubstErr @  then
;

Tests
=====
create tb  256 allot	\ -- addr
\ Buffer for text.
create db  256 allot	\ -- addr
\ destination buffer for text.

: >tb		\ caddr len -- caddr' len
\ Place string in TEXTBUFF, and return the string. Done
\ this way to avoid problems with transient regions.
  tb place  tb count
;

: .sub		\ caddr len n --
\ Display the result of a substitution.
  cr . ." Substitutions, result:" type ." :"
;

: tsub		\ caddr len --
\ Run the substitution text and display the results.
  db 256 substitute .sub
;

s" hello" >tb s" hl" replaces
s" world" >tb s" wld" replaces

s" Start: %hl%,%wld%! :End" tsub
s" Hello, world!" tsub


Change history
==============
2 April 2009
Added reference implementation and test code

26 March 2009
Extracted from the internationalisation proposal.



-- 
Stephen Pelc, stephenXXX@mpeforth.com
MicroProcessor Engineering Ltd - More Real, Less Time
133 Hill Lane, Southampton SO15 5AF, England
tel: +44 (0)23 8063 1441, fax: +44 (0)23 8033 9691
web: http://www.mpeforth.com - free VFX Forth downloads


